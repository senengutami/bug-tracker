pipeline {
  agent any

  stages {

    stage('Unit Tests - Backend') {
      steps {
        script {
          docker.image('golang:1.21').inside('') {
            dir('bugtracker-backend') {
              sh '''
                bash -lc '
                  set -euo pipefail

                  # sanity checks
                  pwd; ls -la
                  test -f go.mod || { echo "go.mod not found in $(pwd)"; exit 2; }

                  # caches
                  export GOCACHE=/tmp/go-build
                  export GOMODCACHE=/tmp/go-mod
                  mkdir -p "$GOCACHE" "$GOMODCACHE"

                  # fetch deps (optional; go test would do it too)
                  go mod download

                  # converter
                  go install github.com/jstemmer/go-junit-report/v2@latest
                  export PATH="$(go env GOPATH)/bin:$PATH"

                  # run tests and convert JSON -> JUnit
                  go test -json ./... 2>&1 | tee test.json
                  status=${PIPESTATUS[0]}
                  go-junit-report -parser gojson -in test.json -out test-results.xml

                  ls -lah test.json test-results.xml
                  head -n 20 test-results.xml || true
                  exit $status
                '
              '''
            }
          }
        }
      }
      post {
        always {
          junit testResults: 'bugtracker-backend/test-results.xml', allowEmptyResults: false
          archiveArtifacts artifacts: 'bugtracker-backend/test.json, bugtracker-backend/test-results.xml', allowEmptyArchive: true
        }
      }
    }

    stage('Unit Tests - Frontend') {
      agent {
        docker {
          image 'node:20-alpine'
          reuseNode true
        }
      }
      steps {
        dir('bugtracker-frontend') {
          sh '''
            set -e
            npm ci
            CI=true npm test -- --watch=false
            ls -la test-results.xml || true
          '''
        }
      }
      post {
        always {
          junit 'bugtracker-frontend/test-results.xml'
          archiveArtifacts artifacts: 'bugtracker-frontend/coverage/**', allowEmptyArchive: true
        }
      }
    }

  } // end stages
}
