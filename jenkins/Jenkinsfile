pipeline {
  agent any

  stages {
    stage('Unit Tests - Backend') {
      steps {
        script {
          docker.image('golang:1.21').inside('') {
            dir('bug-tracker/bugtracker-backend') {
              sh '''
                set -e
                export GOCACHE=/tmp/go-build
                export GOMODCACHE=/tmp/go-mod
                mkdir -p "$GOCACHE" "$GOMODCACHE"
                go mod download
                go test -json ./... | tee test.json | go-junit-report -parser gojson -in test.json -out test-results.xml
              '''
            }
          }
        }
      }
      post {
        always {
          junit 'bug-tracker/bugtracker-backend/test-results.xml'
        }
      }
    }

    stage('Unit Tests - Frontend') {
      agent {
        docker {
          image 'node:20-alpine'
          reuseNode true
        }
      }
      steps {
        dir('bug-tracker/bugtracker-frontend') {
          sh '''
            set -e
            npm ci
            CI=true npm test -- --watch=false
          '''
        }
      }
      post {
        always {
          junit 'bug-tracker/bugtracker-frontend/test-results.xml'
          archiveArtifacts artifacts: 'bug-tracker/bugtracker-frontend/coverage/**', allowEmptyArchive: true
        }
      }
    }
  }
}
